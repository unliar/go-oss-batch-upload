name: release
on:
  push:
    tags:
      - "*"
jobs:
  build:
    name: build&&push
    runs-on: ubuntu-latest
    env:
      REGISTRY: "registry.cn-shenzhen.aliyuncs.com"
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Extract tag name"
        id: extract_tag
        run: |
          echo "tag_name=$(echo ${{ github.ref_name }} | sed 's/refs\/tags\///')" >> $GITHUB_OUTPUT

      - name: "ÂÆπÂô®ÊûÑÂª∫"
        run: |
          docker login --username=${{ secrets.DOCKER_USERNAME }} $REGISTRY --password=${{ secrets.DOCKER_PASSWORD }}
          TAG="happysooner/go-oss-batch-upload:${{ steps.extract_tag.outputs.tag_name }}"
          echo $TAG
          docker build -t go-oss-batch-upload:latest .
          docker tag go-oss-batch-upload:latest $REGISTRY/$TAG
          docker push $REGISTRY/$TAG

      - name: "Build and Package Binaries"
        id: build_binaries
        run: |
          mkdir -p release
          file_list=""
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              if [ "$os" == "windows" ]; then
                GOOS=$os GOARCH=$arch go build -o release/main-$os-$arch.exe . && chmod +x release/main-$os-$arch.exe
                file_list+="release/main-$os-$arch.exe"$'\n'
              else
                GOOS=$os GOARCH=$arch go build -o release/main-$os-$arch . && chmod +x release/main-$os-$arch
                file_list+="release/main-$os-$arch"$'\n'
              fi
            done
          done
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$file_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          release_name: ${{ steps.extract_tag.outputs.tag_name }}
          body: |
            Release notes for version ${{ steps.extract_tag.outputs.tag_name }}
            Latest commit message:
            ${{ github.event.head_commit.message }}
          files: ${{ steps.build_binaries.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: feishu-bot-message
        if: always()
        uses: foxundermoon/feishu-action@v2
        with:
          url: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          msg_type: text
          content: |
            text: |
              üê≥ ÊûÑÂª∫Áä∂ÊÄÅ - From Github Action   
              repository: https://github.com/${{ github.repository }} 
              committer: https://github.com/${{ github.actor }} 
              compare: ${{ github.event.compare }} 
              job status: ${{ job.status }}
